name: Installation Workflow

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Installation target'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - integration
          - appdaemon
          - dependencies
  push:
    branches: [ main ]
    paths:
      - 'custom_components/**'
      - 'appdaemon/**'
      - 'requirements.txt'
      - 'crop_steering.env'
  pull_request:
    branches: [ main ]

jobs:
  validate-integration:
    runs-on: ubuntu-latest
    name: Validate Home Assistant Integration
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install homeassistant==2024.3.0
        
    - name: Validate manifest.json
      run: |
        python -c "
        import json
        import sys
        
        with open('custom_components/crop_steering/manifest.json') as f:
            manifest = json.load(f)
        
        required_fields = ['domain', 'name', 'version', 'documentation', 'codeowners']
        for field in required_fields:
            if field not in manifest:
                print(f'Missing required field: {field}')
                sys.exit(1)
        
        print('✓ Manifest validation passed')
        "
        
    - name: Validate integration structure
      run: |
        python -c "
        import os
        import sys
        
        required_files = [
            'custom_components/crop_steering/__init__.py',
            'custom_components/crop_steering/config_flow.py',
            'custom_components/crop_steering/manifest.json'
        ]
        
        for file in required_files:
            if not os.path.exists(file):
                print(f'Missing required file: {file}')
                sys.exit(1)
        
        print('✓ Integration structure validation passed')
        "

  validate-appdaemon:
    runs-on: ubuntu-latest
    name: Validate AppDaemon Modules
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install AppDaemon and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install appdaemon
        pip install -r requirements.txt
        
    - name: Validate Python syntax
      run: |
        python -m py_compile appdaemon/apps/crop_steering/master_crop_steering_app.py
        python -m py_compile appdaemon/apps/crop_steering/ml_irrigation_predictor.py
        python -m py_compile appdaemon/apps/crop_steering/intelligent_sensor_fusion.py
        python -m py_compile appdaemon/apps/crop_steering/advanced_dryback_detection.py
        python -m py_compile appdaemon/apps/crop_steering/intelligent_crop_profiles.py
        python -m py_compile appdaemon/apps/crop_steering/advanced_crop_steering_dashboard.py
        echo "✓ Python syntax validation passed"
        
    - name: Validate apps.yaml
      run: |
        python -c "
        import yaml
        import sys
        
        try:
            with open('appdaemon/apps/apps.yaml') as f:
                config = yaml.safe_load(f)
            print('✓ apps.yaml validation passed')
        except Exception as e:
            print(f'apps.yaml validation failed: {e}')
            sys.exit(1)
        "

  validate-dependencies:
    runs-on: ubuntu-latest
    name: Validate Dependencies
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Test dependency installation
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✓ Dependencies installed successfully"
        
    - name: Validate required modules
      run: |
        python -c "
        import numpy
        import pandas
        import scipy
        import plotly
        import requests
        print('✓ All required modules imported successfully')
        "

  installation-test:
    runs-on: ubuntu-latest
    name: Full Installation Test
    needs: [validate-integration, validate-appdaemon, validate-dependencies]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Simulate Home Assistant installation
      run: |
        echo "Simulating Home Assistant custom_components installation..."
        mkdir -p /tmp/ha_config/custom_components
        cp -r custom_components/crop_steering /tmp/ha_config/custom_components/
        echo "✓ Integration files copied successfully"
        
    - name: Simulate AppDaemon installation
      run: |
        echo "Simulating AppDaemon apps installation..."
        mkdir -p /tmp/appdaemon_config/apps
        cp -r appdaemon/apps/crop_steering /tmp/appdaemon_config/apps/
        cp appdaemon/apps/apps.yaml /tmp/appdaemon_config/apps/
        echo "✓ AppDaemon files copied successfully"
        
    - name: Install and test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "✓ Dependencies installed successfully"
        
    - name: Generate installation report
      run: |
        echo "# Installation Report" > install_report.md
        echo "" >> install_report.md
        echo "## Validation Results" >> install_report.md
        echo "- ✅ Home Assistant Integration: Valid" >> install_report.md
        echo "- ✅ AppDaemon Modules: Valid" >> install_report.md
        echo "- ✅ Dependencies: Installed" >> install_report.md
        echo "- ✅ Full Installation: Success" >> install_report.md
        echo "" >> install_report.md
        echo "## Installation Paths" >> install_report.md
        echo "- Integration: \`custom_components/crop_steering/\`" >> install_report.md
        echo "- AppDaemon: \`appdaemon/apps/crop_steering/\`" >> install_report.md
        echo "- Configuration: \`crop_steering.env\`" >> install_report.md
        
    - name: Upload installation report
      uses: actions/upload-artifact@v3
      with:
        name: installation-report
        path: install_report.md