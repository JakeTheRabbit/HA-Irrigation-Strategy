# Multi-Crop Profile Support for Crop Steering
# Allows different irrigation strategies for different plant types and growth stages

template:
  - sensor:
      # ACTIVE CROP PROFILE SENSOR
      - name: "cs_active_crop_profile"
        unique_id: cs_active_crop_profile
        state: "{{ states('input_select.cs_crop_type_profile') }}"
        icon: "mdi:sprout-outline"
        attributes:
          profile_settings: >
            {% set profile = states('input_select.cs_crop_type_profile') %}
            {% set profiles = {
              'Cannabis_Indica': {
                'veg_dryback_target': 2.5,
                'gen_dryback_target': 6.0,
                'ec_target_veg': 1.8,
                'ec_target_gen': 2.4,
                'p1_max_shots': 5,
                'p2_frequency_veg': 60,
                'p2_frequency_gen': 90,
                'critical_vwc': 12
              },
              'Cannabis_Sativa': {
                'veg_dryback_target': 3.0,
                'gen_dryback_target': 7.0,
                'ec_target_veg': 1.6,
                'ec_target_gen': 2.2,
                'p1_max_shots': 6,
                'p2_frequency_veg': 45,
                'p2_frequency_gen': 75,
                'critical_vwc': 10
              },
              'Cannabis_Hybrid': {
                'veg_dryback_target': 2.8,
                'gen_dryback_target': 6.5,
                'ec_target_veg': 1.7,
                'ec_target_gen': 2.3,
                'p1_max_shots': 5,
                'p2_frequency_veg': 50,
                'p2_frequency_gen': 80,
                'critical_vwc': 11
              },
              'Tomato': {
                'veg_dryback_target': 1.5,
                'gen_dryback_target': 4.0,
                'ec_target_veg': 2.2,
                'ec_target_gen': 3.0,
                'p1_max_shots': 8,
                'p2_frequency_veg': 30,
                'p2_frequency_gen': 45,
                'critical_vwc': 8
              },
              'Lettuce': {
                'veg_dryback_target': 1.0,
                'gen_dryback_target': 2.5,
                'ec_target_veg': 1.4,
                'ec_target_gen': 1.8,
                'p1_max_shots': 10,
                'p2_frequency_veg': 20,
                'p2_frequency_gen': 30,
                'critical_vwc': 15
              },
              'Basil': {
                'veg_dryback_target': 1.8,
                'gen_dryback_target': 3.5,
                'ec_target_veg': 1.6,
                'ec_target_gen': 2.0,
                'p1_max_shots': 7,
                'p2_frequency_veg': 35,
                'p2_frequency_gen': 50,
                'critical_vwc': 12
              },
              'Custom': {
                'veg_dryback_target': 'user_defined',
                'gen_dryback_target': 'user_defined',
                'ec_target_veg': 'user_defined',
                'ec_target_gen': 'user_defined',
                'p1_max_shots': 'user_defined',
                'p2_frequency_veg': 'user_defined',
                'p2_frequency_gen': 'user_defined',
                'critical_vwc': 'user_defined'
              }
            } %}
            {{ profiles.get(profile, profiles['Cannabis_Hybrid']) | to_json }}
          description: >
            {% set profile = states('input_select.cs_crop_type_profile') %}
            {% set descriptions = {
              'Cannabis_Indica': 'Indica strains: Lower stress tolerance, moderate drybacks, higher EC tolerance',
              'Cannabis_Sativa': 'Sativa strains: Higher stress tolerance, aggressive drybacks, lower EC preference',
              'Cannabis_Hybrid': 'Hybrid strains: Balanced approach between Indica and Sativa characteristics',
              'Tomato': 'Fruiting vegetables: High water needs, high EC tolerance, frequent irrigation',
              'Lettuce': 'Leafy greens: Continuous moisture, low EC, frequent light irrigation',
              'Basil': 'Herbs: Moderate water needs, balanced EC, stress-responsive',
              'Custom': 'User-defined parameters for specialized crops or experiments'
            } %}
            {{ descriptions.get(profile, 'Balanced crop steering approach') }}

      # GROWTH STAGE SENSOR WITH CROP-SPECIFIC LOGIC
      - name: "cs_crop_growth_stage"
        unique_id: cs_crop_growth_stage
        state: >
          {% set profile = states('input_select.cs_crop_type_profile') %}
          {% set current_mode = states('input_select.cs_steering_mode') %}
          {% set days_since_flip = states('input_number.cs_days_since_flip') | float(0) %}
          {% set avg_dryback = states('sensor.dryback_avg_percentage_24h') | float(0) %}
          {% set avg_ec = states('sensor.cs_configured_avg_ec') | float(0) %}
          
          {% if profile.startswith('Cannabis') %}
            {% if current_mode == 'Vegetative' %}
              {% if days_since_flip < 7 %}
                seedling
              {% elif days_since_flip < 21 %}
                early_vegetative
              {% elif days_since_flip < 35 %}
                mid_vegetative
              {% else %}
                late_vegetative
              {% endif %}
            {% else %}
              {% if days_since_flip < 14 %}
                transition
              {% elif days_since_flip < 35 %}
                early_flower
              {% elif days_since_flip < 56 %}
                mid_flower
              {% else %}
                late_flower
              {% endif %}
            {% endif %}
          {% elif profile == 'Tomato' %}
            {% if avg_dryback < 2 and avg_ec < 2.5 %}
              transplant
            {% elif avg_dryback < 3 and avg_ec < 3.0 %}
              vegetative_growth
            {% elif current_mode == 'Generative' and days_since_flip < 21 %}
              first_truss
            {% elif current_mode == 'Generative' %}
              fruit_development
            {% else %}
              vegetative_growth
            {% endif %}
          {% elif profile == 'Lettuce' %}
            {% if days_since_flip < 7 %}
              germination
            {% elif days_since_flip < 21 %}
              leaf_development
            {% elif days_since_flip < 35 %}
              head_formation
            {% else %}
              harvest_ready
            {% endif %}
          {% else %}
            {% if current_mode == 'Vegetative' %}
              vegetative
            {% else %}
              reproductive
            {% endif %}
          {% endif %}
        icon: >
          {% set stage = states('sensor.cs_crop_growth_stage') %}
          {% if stage in ['seedling', 'germination', 'transplant'] %}
            mdi:seedling
          {% elif stage in ['early_vegetative', 'vegetative_growth', 'leaf_development'] %}
            mdi:leaf
          {% elif stage in ['mid_vegetative', 'late_vegetative'] %}
            mdi:tree
          {% elif stage in ['transition', 'first_truss'] %}
            mdi:flower-tulip
          {% elif stage in ['early_flower', 'mid_flower', 'fruit_development'] %}
            mdi:flower
          {% elif stage in ['late_flower', 'harvest_ready'] %}
            mdi:fruit-cherries
          {% else %}
            mdi:sprout
          {% endif %}
        attributes:
          days_since_flip: "{{ states('input_number.cs_days_since_flip') }}"
          recommended_actions: >
            {% set stage = states('sensor.cs_crop_growth_stage') %}
            {% set actions = {
              'seedling': ['Light irrigation', 'Low EC', 'Minimal stress'],
              'early_vegetative': ['Increase frequency', 'Build root system', 'Monitor growth'],
              'mid_vegetative': ['Standard irrigation', 'Moderate EC', 'Training'],
              'late_vegetative': ['Prepare for transition', 'Stabilize environment'],
              'transition': ['Reduce frequency', 'Increase EC gradually', 'Monitor stress'],
              'early_flower': ['Flower-specific EC', 'Controlled stress', 'Monitor development'],
              'mid_flower': ['Peak EC levels', 'Optimize drybacks', 'Environmental control'],
              'late_flower': ['Flush preparation', 'Reduce EC gradually', 'Harvest timing'],
              'harvest_ready': ['Final flush', 'Minimal irrigation', 'Quality focus']
            } %}
            {{ actions.get(stage, ['Monitor closely', 'Adjust as needed']) | join(', ') }}

      # PROFILE OPTIMIZATION RECOMMENDATIONS
      - name: "cs_profile_optimization_recommendations"
        unique_id: cs_profile_optimization_recommendations
        state: >
          {% set profile = states('input_select.cs_crop_type_profile') %}
          {% set current_efficiency = states('sensor.cs_irrigation_efficiency_24h') | float(0) %}
          {% set stage = states('sensor.cs_crop_growth_stage') %}
          {% set avg_dryback = states('sensor.dryback_avg_percentage_24h') | float(0) %}
          {% set avg_ec = states('sensor.cs_configured_avg_ec') | float(0) %}
          {% set profile_settings = state_attr('sensor.cs_active_crop_profile', 'profile_settings') | from_json %}
          
          {% if current_efficiency < 70 %}
            efficiency_improvement_needed
          {% elif profile_settings.get('veg_dryback_target') != 'user_defined' %}
            {% set target_dryback = profile_settings.get('gen_dryback_target' if states('input_select.cs_steering_mode') == 'Generative' else 'veg_dryback_target', 3) %}
            {% if abs(avg_dryback - target_dryback) > 1.5 %}
              dryback_adjustment_recommended
            {% elif abs(avg_ec - profile_settings.get('ec_target_gen' if states('input_select.cs_steering_mode') == 'Generative' else 'ec_target_veg', 2)) > 0.3 %}
              ec_adjustment_recommended
            {% else %}
              profile_optimized
            {% endif %}
          {% else %}
            custom_profile_monitoring
          {% endif %}
        icon: "mdi:tune"
        attributes:
          current_efficiency: "{{ states('sensor.cs_irrigation_efficiency_24h') }}%"
          target_dryback: >
            {% set profile_settings = state_attr('sensor.cs_active_crop_profile', 'profile_settings') | from_json %}
            {% set mode = states('input_select.cs_steering_mode') %}
            {{ profile_settings.get('gen_dryback_target' if mode == 'Generative' else 'veg_dryback_target', 'N/A') }}%
          target_ec: >
            {% set profile_settings = state_attr('sensor.cs_active_crop_profile', 'profile_settings') | from_json %}
            {% set mode = states('input_select.cs_steering_mode') %}
            {{ profile_settings.get('ec_target_gen' if mode == 'Generative' else 'ec_target_veg', 'N/A') }} mS/cm
          recommendations: >
            {% set recommendation = states('sensor.cs_profile_optimization_recommendations') %}
            {% if recommendation == 'efficiency_improvement_needed' %}
              ["Reduce irrigation frequency", "Check for clogged drippers", "Verify sensor accuracy"]
            {% elif recommendation == 'dryback_adjustment_recommended' %}
              ["Adjust P0 dryback targets", "Fine-tune irrigation timing", "Monitor plant response"]
            {% elif recommendation == 'ec_adjustment_recommended' %}
              ["Adjust nutrient concentration", "Check EC sensor calibration", "Monitor runoff EC"]
            {% elif recommendation == 'profile_optimized' %}
              ["System performing well", "Continue monitoring", "Consider minor optimizations"]
            {% else %}
              ["Monitor system performance", "Document custom settings", "Regular calibration checks"]
            {% endif %}

  # BINARY SENSORS FOR PROFILE ALERTS
  - binary_sensor:
      - name: "cs_profile_mismatch_alert"
        unique_id: cs_profile_mismatch_alert
        state: >
          {% set profile = states('input_select.cs_crop_type_profile') %}
          {% set stage = states('sensor.cs_crop_growth_stage') %}
          {% set current_mode = states('input_select.cs_steering_mode') %}
          {% set profile_settings = state_attr('sensor.cs_active_crop_profile', 'profile_settings') | from_json %}
          {% set avg_dryback = states('sensor.dryback_avg_percentage_24h') | float(0) %}
          {% set avg_ec = states('sensor.cs_configured_avg_ec') | float(0) %}
          
          {% if profile != 'Custom' and profile_settings %}
            {% set target_dryback = profile_settings.get('gen_dryback_target' if current_mode == 'Generative' else 'veg_dryback_target', 3) %}
            {% set target_ec = profile_settings.get('ec_target_gen' if current_mode == 'Generative' else 'ec_target_veg', 2) %}
            {{ abs(avg_dryback - target_dryback) > 2.0 or abs(avg_ec - target_ec) > 0.5 }}
          {% else %}
            false
          {% endif %}
        device_class: problem
        attributes:
          dryback_deviation: >
            {% set profile_settings = state_attr('sensor.cs_active_crop_profile', 'profile_settings') | from_json %}
            {% set current_mode = states('input_select.cs_steering_mode') %}
            {% set target = profile_settings.get('gen_dryback_target' if current_mode == 'Generative' else 'veg_dryback_target', 3) %}
            {% set current = states('sensor.dryback_avg_percentage_24h') | float(0) %}
            {{ (current - target) | round(1) }}%
          ec_deviation: >
            {% set profile_settings = state_attr('sensor.cs_active_crop_profile', 'profile_settings') | from_json %}
            {% set current_mode = states('input_select.cs_steering_mode') %}
            {% set target = profile_settings.get('ec_target_gen' if current_mode == 'Generative' else 'ec_target_veg', 2) %}
            {% set current = states('sensor.cs_configured_avg_ec') | float(0) %}
            {{ (current - target) | round(2) }} mS/cm