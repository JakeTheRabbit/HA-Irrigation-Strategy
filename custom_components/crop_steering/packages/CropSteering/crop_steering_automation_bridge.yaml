# Crop Steering Automation Bridge
# Connects integration services with AppDaemon automation
# Provides autonomous phase transitions and irrigation control

automation:
  # Automatic Phase Transition Checker
  - id: crop_steering_phase_transition_checker
    alias: "Crop Steering: Phase Transition Checker"
    description: "Periodically checks if phase transitions should occur"
    trigger:
      - platform: time_pattern
        minutes: "/5"  # Check every 5 minutes
    condition:
      - condition: state
        entity_id: switch.crop_steering_system_enabled
        state: "on"
    action:
      - service: crop_steering.check_transition_conditions
        data: {}

  # Handle Phase Transition Events
  - id: crop_steering_handle_phase_transition
    alias: "Crop Steering: Handle Phase Transition"
    description: "Responds to phase transition events and coordinates with AppDaemon"
    trigger:
      - platform: event
        event_type: crop_steering_phase_transition
    action:
      - service: logbook.log
        data:
          name: "Crop Steering Phase Transition"
          message: "Phase changed to {{ trigger.event.data.target_phase }} - {{ trigger.event.data.reason }}"
      # Fire AppDaemon event
      - event: appdaemon_phase_transition
        event_data:
          phase: "{{ trigger.event.data.target_phase }}"
          reason: "{{ trigger.event.data.reason }}"
          timestamp: "{{ trigger.event.data.timestamp }}"

  # P1 to P2 Transition Automation
  - id: crop_steering_p1_to_p2_transition
    alias: "Crop Steering: P1 to P2 Transition"
    description: "Automatic transition from P1 to P2 based on VWC and EC conditions"
    trigger:
      - platform: event
        event_type: crop_steering_transition_check
    condition:
      - condition: template
        value_template: "{{ trigger.event.data.current_phase == 'P1' }}"
      - condition: template
        value_template: "{{ trigger.event.data.conditions_met }}"
    action:
      - service: crop_steering.transition_phase
        data:
          target_phase: "P2"
          reason: "{{ trigger.event.data.transition_reasons | join(', ') }}"

  # P2 Irrigation Trigger
  - id: crop_steering_p2_irrigation_trigger
    alias: "Crop Steering: P2 Irrigation Trigger"
    description: "Triggers irrigation during P2 phase when VWC drops below threshold"
    trigger:
      - platform: numeric_state
        entity_id: sensor.crop_steering_configured_avg_vwc
        below: input_number.crop_steering_p2_vwc_threshold  # This should reference the adjusted threshold
        for:
          minutes: 2  # Prevent rapid cycling
    condition:
      - condition: state
        entity_id: select.crop_steering_irrigation_phase
        state: "P2"
      - condition: state
        entity_id: switch.crop_steering_system_enabled
        state: "on"
    action:
      - service: crop_steering.execute_irrigation_shot
        data:
          zone: 1  # Start with zone 1, expand for multi-zone later
          duration_seconds: "{{ states('sensor.crop_steering_p2_shot_duration_seconds') | int }}"
          shot_type: "P2"

  # Emergency P3 Irrigation
  - id: crop_steering_p3_emergency_irrigation
    alias: "Crop Steering: P3 Emergency Irrigation"
    description: "Emergency irrigation during P3 if VWC drops too low"
    trigger:
      - platform: numeric_state
        entity_id: sensor.crop_steering_configured_avg_vwc
        below: input_number.crop_steering_p3_emergency_vwc_threshold
    condition:
      - condition: state
        entity_id: select.crop_steering_irrigation_phase
        state: "P3"
      - condition: state
        entity_id: switch.crop_steering_system_enabled
        state: "on"
    action:
      - service: crop_steering.execute_irrigation_shot
        data:
          zone: 1
          duration_seconds: "{{ states('sensor.crop_steering_p3_shot_duration_seconds') | int }}"
          shot_type: "P3_emergency"
      - service: persistent_notification.create
        data:
          title: "Crop Steering Emergency"
          message: "Emergency irrigation triggered in P3 phase. VWC: {{ states('sensor.crop_steering_configured_avg_vwc') }}%"
          notification_id: "crop_steering_emergency"

  # Handle Irrigation Shot Events (for AppDaemon coordination)
  - id: crop_steering_handle_irrigation_shot
    alias: "Crop Steering: Handle Irrigation Shot"
    description: "Logs irrigation shots and coordinates with AppDaemon"
    trigger:
      - platform: event
        event_type: crop_steering_irrigation_shot
    action:
      - service: logbook.log
        data:
          name: "Crop Steering Irrigation"
          message: "Zone {{ trigger.event.data.zone }} irrigation: {{ trigger.event.data.duration_seconds }}s ({{ trigger.event.data.shot_type }})"
      # Fire AppDaemon event for hardware control
      - event: appdaemon_irrigation_shot
        event_data:
          zone: "{{ trigger.event.data.zone }}"
          duration: "{{ trigger.event.data.duration_seconds }}"
          shot_type: "{{ trigger.event.data.shot_type }}"
          timestamp: "{{ trigger.event.data.timestamp }}"

  # System Status Monitor
  - id: crop_steering_system_monitor
    alias: "Crop Steering: System Status Monitor"
    description: "Monitors system health and sensor availability"
    trigger:
      - platform: time_pattern
        minutes: "/10"  # Check every 10 minutes
    condition:
      - condition: state
        entity_id: switch.crop_steering_system_enabled
        state: "on"
    action:
      - service: crop_steering.check_transition_conditions
        data: {}
      # Log current status
      - service: logbook.log
        data:
          name: "Crop Steering Status"
          message: >
            Phase: {{ states('select.crop_steering_irrigation_phase') }}, 
            VWC: {{ states('sensor.crop_steering_configured_avg_vwc') }}%, 
            EC: {{ states('sensor.crop_steering_configured_avg_ec') }}, 
            Ratio: {{ states('sensor.crop_steering_ec_ratio') }}

# Input helpers for automation parameters
input_number:
  crop_steering_transition_check_interval:
    name: "Transition Check Interval"
    min: 1
    max: 30
    step: 1
    unit_of_measurement: "minutes"
    initial: 5
    icon: mdi:timer

input_boolean:
  crop_steering_auto_transitions:
    name: "Enable Auto Transitions"
    initial: true
    icon: mdi:auto-mode

  crop_steering_auto_irrigation:
    name: "Enable Auto Irrigation"
    initial: true
    icon: mdi:water-pump