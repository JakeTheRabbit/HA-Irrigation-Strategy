# MQTT Remote Monitoring for Crop Steering
# Enables external monitoring and control via MQTT

template:
  - sensor:
      # MQTT STATUS MONITOR
      - name: "cs_mqtt_status"
        unique_id: cs_mqtt_status
        state: >
          {% if is_state('input_boolean.cs_mqtt_enabled', 'on') %}
            {% if states('sensor.cs_mqtt_last_publish') != 'unknown' %}
              {% set last_publish = as_timestamp(states('sensor.cs_mqtt_last_publish')) | default(0) %}
              {% set current_time = now().timestamp() %}
              {% if (current_time - last_publish) < 300 %}
                online
              {% else %}
                stale
              {% endif %}
            {% else %}
              initializing
            {% endif %}
          {% else %}
            disabled
          {% endif %}
        icon: >
          {% set status = states('sensor.cs_mqtt_status') %}
          {% if status == 'online' %}
            mdi:wifi
          {% elif status == 'stale' %}
            mdi:wifi-off
          {% elif status == 'initializing' %}
            mdi:wifi-cog
          {% else %}
            mdi:wifi-off
          {% endif %}
        attributes:
          last_publish: "{{ states('sensor.cs_mqtt_last_publish') }}"
          publish_interval: "{{ states('input_number.cs_mqtt_publish_interval') }}s"
          enabled: "{{ is_state('input_boolean.cs_mqtt_enabled', 'on') }}"

      # MQTT PAYLOAD GENERATOR
      - name: "cs_mqtt_data_payload"
        unique_id: cs_mqtt_data_payload
        state: >
          {
            "timestamp": {{ now().timestamp() | round(0) }},
            "system": {
              "phase": "{{ states('input_select.cs_crop_steering_phase') }}",
              "mode": "{{ states('input_select.cs_steering_mode') }}",
              "status": "{{ states('sensor.cs_irrigation_status') }}"
            },
            "sensors": {
              "vwc_avg": {{ states('sensor.cs_configured_avg_vwc') | float(0) }},
              "vwc_min": {{ states('sensor.cs_configured_min_vwc') | float(0) }},
              "vwc_max": {{ states('sensor.cs_configured_max_vwc') | float(0) }},
              "ec_avg": {{ states('sensor.cs_configured_avg_ec') | float(0) }},
              "ec_ratio": {{ states('sensor.cs_ec_ratio') | float(0) }}
            },
            "analytics": {
              "efficiency_24h": {{ states('sensor.cs_irrigation_efficiency_24h') | float(0) }},
              "water_used_24h": {{ states('sensor.cs_total_water_used_24h') | float(0) }},
              "shots_24h": {{ states('sensor.cs_total_shots_24h') | float(0) }},
              "dryback_avg_24h": {{ states('sensor.dryback_avg_percentage_24h') | float(0) }}
            },
            "health": {
              "sensor_health": {{ states('sensor.cs_sensor_health_score') | float(0) }},
              "fusion_confidence": {{ state_attr('sensor.cs_fused_vwc_reading', 'confidence_level') | default(0) }},
              "outliers_detected": {{ state_attr('sensor.cs_fused_vwc_reading', 'outliers_detected') | default(0) }}
            },
            "recommendations": {
              "optimization": "{{ states('sensor.cs_optimization_recommendation') }}",
              "growth_stage": "{{ states('sensor.cs_growth_stage_recommendation') }}",
              "optimal_zone": "{{ states('sensor.cs_optimal_irrigation_zone') }}"
            }
          }
        attributes:
          topic: "{{ states('input_text.cs_mqtt_data_topic') }}"
          size_bytes: "{{ states('sensor.cs_mqtt_data_payload') | length }}"

      # MQTT ALERT PAYLOAD GENERATOR
      - name: "cs_mqtt_alert_payload"
        unique_id: cs_mqtt_alert_payload
        state: >
          {% if is_state('binary_sensor.cs_sensor_fusion_alert', 'on') or 
                is_state('binary_sensor.cs_data_quality_warning', 'on') %}
            {
              "timestamp": {{ now().timestamp() | round(0) }},
              "alert_type": "system_warning",
              "severity": "medium",
              "alerts": [
                {% if is_state('binary_sensor.cs_sensor_fusion_alert', 'on') %}
                {
                  "type": "sensor_fusion",
                  "message": "{{ state_attr('binary_sensor.cs_sensor_fusion_alert', 'alert_reason') }}",
                  "vwc_outliers": {{ state_attr('binary_sensor.cs_sensor_fusion_alert', 'vwc_outliers') | default(0) }},
                  "ec_outliers": {{ state_attr('binary_sensor.cs_sensor_fusion_alert', 'ec_outliers') | default(0) }}
                }{% if is_state('binary_sensor.cs_data_quality_warning', 'on') %},{% endif %}
                {% endif %}
                {% if is_state('binary_sensor.cs_data_quality_warning', 'on') %}
                {
                  "type": "data_quality",
                  "message": "{{ state_attr('binary_sensor.cs_data_quality_warning', 'recommendation') }}",
                  "vwc_sensors": {{ state_attr('binary_sensor.cs_data_quality_warning', 'vwc_sensor_count') | default(0) }},
                  "ec_sensors": {{ state_attr('binary_sensor.cs_data_quality_warning', 'ec_sensor_count') | default(0) }}
                }
                {% endif %}
              ]
            }
          {% else %}
            null
          {% endif %}
        attributes:
          topic: "{{ states('input_text.cs_mqtt_alert_topic') }}"
          has_alerts: >
            {{ is_state('binary_sensor.cs_sensor_fusion_alert', 'on') or 
               is_state('binary_sensor.cs_data_quality_warning', 'on') }}

      - name: "cs_mqtt_last_publish"
        unique_id: cs_mqtt_last_publish
        state: "{{ states('input_datetime.cs_mqtt_last_publish_time') }}"
        device_class: timestamp

# MQTT PUBLISH AUTOMATION (if not using AppDaemon)
automation:
  # Regular data publishing
  - alias: "CS MQTT Data Publisher"
    id: cs_mqtt_data_publisher
    trigger:
      - platform: time_pattern
        seconds: "/30"  # Every 30 seconds
    condition:
      - condition: state
        entity_id: input_boolean.cs_mqtt_enabled
        state: 'on'
      - condition: template
        value_template: >
          {% set interval = states('input_number.cs_mqtt_publish_interval') | int(60) %}
          {% set last_publish = states('sensor.cs_mqtt_last_publish') %}
          {% if last_publish == 'unknown' %}
            true
          {% else %}
            {% set last_time = as_timestamp(last_publish) | default(0) %}
            {% set current_time = now().timestamp() %}
            {{ (current_time - last_time) >= interval }}
          {% endif %}
    action:
      - service: mqtt.publish
        data:
          topic: "{{ states('input_text.cs_mqtt_data_topic') }}"
          payload: "{{ states('sensor.cs_mqtt_data_payload') }}"
          retain: false
          qos: 1
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.cs_mqtt_last_publish_time
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"

  # Alert publishing
  - alias: "CS MQTT Alert Publisher"
    id: cs_mqtt_alert_publisher
    trigger:
      - platform: state
        entity_id: binary_sensor.cs_sensor_fusion_alert
        to: 'on'
      - platform: state
        entity_id: binary_sensor.cs_data_quality_warning
        to: 'on'
    condition:
      - condition: state
        entity_id: input_boolean.cs_mqtt_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.cs_mqtt_alerts_enabled
        state: 'on'
    action:
      - service: mqtt.publish
        data:
          topic: "{{ states('input_text.cs_mqtt_alert_topic') }}"
          payload: "{{ states('sensor.cs_mqtt_alert_payload') }}"
          retain: true
          qos: 2

  # Command listener
  - alias: "CS MQTT Command Listener"
    id: cs_mqtt_command_listener
    trigger:
      - platform: mqtt
        topic: "{{ states('input_text.cs_mqtt_command_topic') }}"
    condition:
      - condition: state
        entity_id: input_boolean.cs_mqtt_enabled
        state: 'on'
      - condition: state
        entity_id: input_boolean.cs_mqtt_commands_enabled
        state: 'on'
    action:
      - choose:
          # Emergency stop
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.command == 'emergency_stop' }}"
            sequence:
              - service: input_boolean.turn_off
                target:
                  entity_id: 
                    - input_boolean.cs_zone_1_enabled
                    - input_boolean.cs_zone_2_enabled
                    - input_boolean.cs_zone_3_enabled
              - service: mqtt.publish
                data:
                  topic: "{{ states('input_text.cs_mqtt_response_topic') }}"
                  payload: '{"status": "emergency_stop_executed", "timestamp": {{ now().timestamp() | round(0) }}}'

          # Change mode
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.command == 'set_mode' }}"
            sequence:
              - service: input_select.select_option
                target:
                  entity_id: input_select.cs_steering_mode
                data:
                  option: "{{ trigger.payload_json.mode }}"
              - service: mqtt.publish
                data:
                  topic: "{{ states('input_text.cs_mqtt_response_topic') }}"
                  payload: '{"status": "mode_changed", "new_mode": "{{ trigger.payload_json.mode }}", "timestamp": {{ now().timestamp() | round(0) }}}'

          # Manual irrigation
          - conditions:
              - condition: template
                value_template: "{{ trigger.payload_json.command == 'manual_irrigation' }}"
            sequence:
              - service: input_boolean.turn_on
                target:
                  entity_id: "input_boolean.cs_zone_{{ trigger.payload_json.zone | default(1) }}_enabled"
              - delay:
                  seconds: "{{ trigger.payload_json.duration | default(30) }}"
              - service: input_boolean.turn_off
                target:
                  entity_id: "input_boolean.cs_zone_{{ trigger.payload_json.zone | default(1) }}_enabled"
              - service: mqtt.publish
                data:
                  topic: "{{ states('input_text.cs_mqtt_response_topic') }}"
                  payload: '{"status": "manual_irrigation_completed", "zone": {{ trigger.payload_json.zone | default(1) }}, "duration": {{ trigger.payload_json.duration | default(30) }}, "timestamp": {{ now().timestamp() | round(0) }}}'

        default:
          - service: mqtt.publish
            data:
              topic: "{{ states('input_text.cs_mqtt_response_topic') }}"
              payload: '{"status": "unknown_command", "received": "{{ trigger.payload }}", "timestamp": {{ now().timestamp() | round(0) }}}'